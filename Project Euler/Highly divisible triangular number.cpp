/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Let n = (the maximum checked number).
In this problem's example, n=7.

In my algorithm, you can calculate the number of divisors of 1,3,6,...,n(n+1)2.

====================Solution===============================
Thanks @square1001
Let d(n) = (the number of divisors of n).
For example. d(15)=4 because 1, 3, 5, 15 is the divisor of 15.

You can find that:
n(n+1)2={n⋅n+12,n2⋅(n+1),n is oddn is even


Amazingly:
d(n(n+1)2)={d(n)⋅d(n+12),d(n2)⋅d(n+1),n is oddn is even


Proof:
If gcd(a,b)=1, d(ab)=d(a)⋅d(b) because it has no duplicated prime factor.
You can prove that gcd(n,n+1)=1⇒gcd(n,n+12)=1.
So, if n is odd, d(n(n+1)2)=d(n)⋅d(n+12).
In the "n is even" case, it is almost same proof.

So you can only calculate d(1),d(2),...,d(n+1).
If you pre-calculate this value, the computation time is O(nn−−√).
If you pre-calculate this value with sieve, the computation time is O(nlog2n).

*/
#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define l long
#define lld long long double
#define ld long double
#define loop(i, a, b) for(i=a; i<b; i++)
#define rloop(i, a, b) for(i=a; i>=b; i--)
#define MAX INT_MAX
#define MIN INT_MIN
#define size(a) a.size()
#define len(a) a.length()
#define all(a) a.begin(), a.end()
#define mod 1000000007
#define read(a) cin>>a
#define echo(a) cout<<a
#define boost std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout.tie(NULL);

ll countFactor(ll n){
    ll count = 0;
    for(ll i=1; i*i<=n; ++i){
        if(n % i == 0){
           count += 2;
        }

        if(i*i == n){
            --count;
        }
    }
    return count;
}

void optimized(){
    
    ll n; cin>>n;
    vector<ll> d(n + 2);
    for(ll index = 1; index < n + 2; index++){
        d[index] = countFactor(index);

    }

    ll limit = 500;
    for(ll index = 1; index <= n; index++){
        ll factorsCount = 0;
        if(index&1){
            factorsCount = d[index]*d[(index + 1)/2];
        }
        else{
            factorsCount = d[index/2]*d[index + 1];
        }

        if(limit < factorsCount){
            cout << factorsCount << ' ' << index << ' ' << 1LL * index * (index + 1) / 2 << endl;
			limit = factorsCount;
            break;

        }
    }
}


void bruteForce(){

    ll number = 1, index = 1;
    while(countFactor(number) < 500){
        ++index;
        number += index;
    }

    cout<<number<<"\n";
        
}

int main(){
	boost;
	int t; cin>>t;
	while(t--){ 
	    // bruteForce();
        optimized();
	}
	return 0;
}